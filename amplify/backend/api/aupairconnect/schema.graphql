type User
    @model
    @auth(rules: [{allow: owner, operations: [create, update, read, delete]}
        { allow: public, operations: [create, read, update, delete] }
        { allow: private, operations: [create, read, update, delete] }])
    @aws_cognito_user_pools{

    id: ID!
    handle: String!
    userId: String!
    name: String!
    email: String!
    status: String!
    birthdate: AWSDate!
    nationality: String!
    bio: String
    createdAt: AWSDateTime
    city: String
    state: String
    country: String
    zipcode: String
    latitude: Float
    longitude: Float
    chatroomsIds: [String]
    followersIds: [String]
    followingsIds: [String]
    blockedUsers: [String]
    active: Boolean
}

type Chatroom
    @model
    @auth(rules: [{allow: owner, operations: [create, update, read, delete]}
        { allow: public, operations: [create, read, update, delete] }
        { allow: private, operations: [create, read, update, delete] }])
    @aws_cognito_user_pools{
    
    id: ID!
    messages: [Message] @hasMany
    usersIds: [String]
    createdAt: AWSDateTime
    active: Boolean
}

type Message
    @model
    @auth(rules: [{allow: owner, operations: [create, update, read, delete]}
        { allow: public, operations: [create, read, update, delete] }
        { allow: private, operations: [create, read, update, delete] }])
    @aws_cognito_user_pools{
    
    id: ID!
    text: String
    createdBy: String
    createdAt: AWSDateTime
    chatroomId: String! @index(name: "messagesByDate", queryField: "messagesByDate", sortKeyFields: ["createdAt"])
    chatroomMessagesId: ID
    active: Boolean
}

type Post
    @model
    @auth(rules: [{allow: owner, operations: [create, update, read, delete]}
        { allow: public, operations: [create, read, update, delete] }])
    @aws_cognito_user_pools{
    
    id: ID!
    title: String
    description: String
    createdBy: String
    createdAt: AWSDateTime
    comments: [Comment] @hasMany
    active: Boolean
}

type Comment
    @model
    @auth(rules: [{allow: owner, operations: [create, update, read, delete]}
        { allow: public, operations: [create, read, update, delete] }])
    @aws_cognito_user_pools{
    
    id: ID!
    text: String
    createdBy: String
    createdAt: AWSDateTime
    post: Post @belongsTo
    postId: String
    active: Boolean
}

type Report
    @model
    @auth(rules: [{allow: owner, operations: [create, update, read, delete]}
        { allow: public, operations: [create, read, update, delete] }])
    @aws_cognito_user_pools{
    
    id: ID!
    reporterId: String
    reportedId: String
    reason: String
    createdAt: AWSDateTime
}

type Query {
    getUserByHandle(handle: String!): User
}

type Subscription {
    onMessageByChatroomId(chatroomMessagesId: ID): Message
    @aws_subscribe(mutations: ["createMessage"])
}
